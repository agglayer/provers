// This file is @generated by prost-build.
/// The request message for generating aggchain proof.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenerateAggchainProofRequest {
    /// The start block for which the aggchain proof is requested.
    #[prost(uint64, tag = "1")]
    pub start_block: u64,
    /// The max end block for which the aggchain proof is requested.
    #[prost(uint64, tag = "2")]
    pub max_end_block: u64,
    /// L1 Info tree root. (hash)
    #[prost(bytes = "vec", tag = "3")]
    pub l1_info_tree_root_hash: ::prost::alloc::vec::Vec<u8>,
    /// L1 Info tree leaf
    #[prost(message, optional, tag = "4")]
    pub l1_info_tree_leaf: ::core::option::Option<L1InfoTreeLeaf>,
    /// L1 Info tree proof. (\[32\]hash)
    #[prost(bytes = "vec", repeated, tag = "5")]
    pub l1_info_tree_merkle_proof: ::prost::alloc::vec::Vec<
        ::prost::alloc::vec::Vec<u8>,
    >,
    /// Map of the GER with their inclusion proof. Note: the GER (string) is a base64 encoded string of the GER digest.
    #[prost(map = "string, message", tag = "6")]
    pub ger_inclusion_proofs: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        InclusionProof,
    >,
    /// bridge exits
    #[prost(message, repeated, tag = "7")]
    pub imported_bridge_exits: ::prost::alloc::vec::Vec<ImportedBridgeExit>,
}
/// The aggchain proof response message.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenerateAggchainProofResponse {
    /// Aggchain proof.
    #[prost(bytes = "vec", tag = "1")]
    pub aggchain_proof: ::prost::alloc::vec::Vec<u8>,
    /// The start block of the aggchain proof.
    #[prost(uint64, tag = "2")]
    pub start_block: u64,
    /// The end block of the aggchain proof.
    #[prost(uint64, tag = "3")]
    pub end_block: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InclusionProof {
    /// Siblings.
    #[prost(bytes = "vec", repeated, tag = "1")]
    pub siblings: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct L1InfoTreeLeaf {
    /// previous block hash of leaf
    #[prost(bytes = "vec", tag = "1")]
    pub previous_block_hash: ::prost::alloc::vec::Vec<u8>,
    /// block number timestamp
    #[prost(uint64, tag = "2")]
    pub timestamp: u64,
    /// mainnet exit root hash
    #[prost(bytes = "vec", tag = "3")]
    pub mainnet_exit_root_hash: ::prost::alloc::vec::Vec<u8>,
    /// rollup exit root hash
    #[prost(bytes = "vec", tag = "4")]
    pub rollup_exit_root_hash: ::prost::alloc::vec::Vec<u8>,
    /// global exit root hash
    #[prost(bytes = "vec", tag = "5")]
    pub global_exit_root_hash: ::prost::alloc::vec::Vec<u8>,
    /// leaf hash
    #[prost(bytes = "vec", tag = "6")]
    pub leaf_hash: ::prost::alloc::vec::Vec<u8>,
    /// leaf index
    #[prost(uint32, tag = "7")]
    pub l1_info_tree_index: u32,
}
/// Represents a token bridge exit originating on another network but claimed on
/// the current network.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImportedBridgeExit {
    /// / The bridge exit initiated on another network, called the "sending"
    /// / network. Need to verify that the destination network matches the
    /// / current network, and that the bridge exit is included in an imported
    /// / LER
    #[prost(message, optional, tag = "1")]
    pub bridge_exit: ::core::option::Option<BridgeExit>,
    /// / The global index of the imported bridge exit.
    #[prost(message, optional, tag = "2")]
    pub global_index: ::core::option::Option<GlobalIndex>,
}
/// Represents a token bridge exit from the network.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BridgeExit {
    /// The type of the leaf.
    #[prost(enumeration = "LeafType", tag = "1")]
    pub leaf_type: i32,
    /// Unique ID for the token being transferred.
    #[prost(message, optional, tag = "2")]
    pub token_info: ::core::option::Option<TokenInfo>,
    /// Network which the token is transferred to
    #[prost(uint32, tag = "3")]
    pub destination_network: u32,
    /// Address which will own the received token
    #[prost(bytes = "vec", tag = "4")]
    pub destination_address: ::prost::alloc::vec::Vec<u8>,
    /// Token amount sent
    #[prost(string, tag = "5")]
    pub amount: ::prost::alloc::string::String,
    /// is metadata hashed
    #[prost(bool, tag = "6")]
    pub is_metadata_hashed: bool,
    /// Metadata for the bridge exit
    #[prost(bytes = "vec", tag = "7")]
    pub metadata: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GlobalIndex {
    /// mainnet flag
    #[prost(bool, tag = "1")]
    pub mainnet_flag: bool,
    /// rollup index
    #[prost(uint32, tag = "2")]
    pub rollup_index: u32,
    /// leaf index
    #[prost(uint32, tag = "3")]
    pub leaf_index: u32,
}
/// Encapsulates the information to uniquely identify a token on the origin
/// network.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenInfo {
    /// Network which the token originates from
    #[prost(uint32, tag = "1")]
    pub origin_network: u32,
    /// The address of the token on the origin network
    #[prost(bytes = "vec", tag = "2")]
    pub origin_token_address: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LeafType {
    /// Unspecified leaf type.
    Unspecified = 0,
    /// Transfer leaf type.
    Transfer = 1,
    /// Message leaf type.
    Message = 2,
}
impl LeafType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "LEAF_TYPE_UNSPECIFIED",
            Self::Transfer => "LEAF_TYPE_TRANSFER",
            Self::Message => "LEAF_TYPE_MESSAGE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LEAF_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "LEAF_TYPE_TRANSFER" => Some(Self::Transfer),
            "LEAF_TYPE_MESSAGE" => Some(Self::Message),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod aggchain_proof_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Service for generating aggchain proof.
    #[derive(Debug, Clone)]
    pub struct AggchainProofServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl AggchainProofServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> AggchainProofServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> AggchainProofServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            AggchainProofServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Generates a aggchain proof for a given start_block.
        pub async fn generate_aggchain_proof(
            &mut self,
            request: impl tonic::IntoRequest<super::GenerateAggchainProofRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GenerateAggchainProofResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/aggkit.prover.v1.AggchainProofService/GenerateAggchainProof",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "aggkit.prover.v1.AggchainProofService",
                        "GenerateAggchainProof",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod aggchain_proof_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with AggchainProofServiceServer.
    #[async_trait]
    pub trait AggchainProofService: std::marker::Send + std::marker::Sync + 'static {
        /// Generates a aggchain proof for a given start_block.
        async fn generate_aggchain_proof(
            &self,
            request: tonic::Request<super::GenerateAggchainProofRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GenerateAggchainProofResponse>,
            tonic::Status,
        >;
    }
    /// Service for generating aggchain proof.
    #[derive(Debug)]
    pub struct AggchainProofServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> AggchainProofServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>>
    for AggchainProofServiceServer<T>
    where
        T: AggchainProofService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/aggkit.prover.v1.AggchainProofService/GenerateAggchainProof" => {
                    #[allow(non_camel_case_types)]
                    struct GenerateAggchainProofSvc<T: AggchainProofService>(pub Arc<T>);
                    impl<
                        T: AggchainProofService,
                    > tonic::server::UnaryService<super::GenerateAggchainProofRequest>
                    for GenerateAggchainProofSvc<T> {
                        type Response = super::GenerateAggchainProofResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GenerateAggchainProofRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AggchainProofService>::generate_aggchain_proof(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GenerateAggchainProofSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for AggchainProofServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "aggkit.prover.v1.AggchainProofService";
    impl<T> tonic::server::NamedService for AggchainProofServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
