syntax = "proto3";

package aggkit.prover.v1;

import "agglayer/interop/types/v1/bytes.proto";
import "agglayer/interop/types/v1/claim.proto";
import "agglayer/interop/types/v1/imported_bridge_exit.proto";
import "agglayer/interop/types/v1/merkle_proof.proto";

// Service for generating aggchain proof.
service AggchainProofService {
  // Generates a aggchain proof for a given last_proven_block.
  rpc GenerateAggchainProof(GenerateAggchainProofRequest) returns (GenerateAggchainProofResponse);
}

// The request message for generating aggchain proof.
message GenerateAggchainProofRequest {
  // The last proven block before the requested aggchain prof.
  uint64 last_proven_block = 1;

  // The max end block for which the aggchain proof is requested.
  uint64 requested_end_block = 2;

  // L1 Info tree root. (hash)
  agglayer.interop.types.v1.FixedBytes32 l1_info_tree_root_hash = 3;

  // L1 Info tree leaf
  agglayer.interop.types.v1.L1InfoTreeLeafWithContext l1_info_tree_leaf = 4;

  // L1 Info tree proof. ([32]hash)
  agglayer.interop.types.v1.MerkleProof l1_info_tree_merkle_proof = 5;

  // Map of the GER with their ger leaf. Note: the GER (string) is a base64 encoded string of the GER digest.
  map<string, ProvenInsertedGERWithBlockNumber> ger_leaves = 6;

  // bridge exits
  repeated ImportedBridgeExitWithBlockNumber imported_bridge_exits = 7;
}

// The aggchain proof response message.
message GenerateAggchainProofResponse {
  // Aggchain proof.
  bytes aggchain_proof = 1;

  // The last proven block before the computed aggchain proof.
  uint64 last_proven_block = 2;

  // The end block of the aggchain proof.
  uint64 end_block = 3;

  // Local exit root hash.
  agglayer.interop.types.v1.FixedBytes32 local_exit_root_hash = 4;

  // Custom chain data.
  bytes custom_chain_data = 5;
}

// Imported bridge exit with block number.
message ImportedBridgeExitWithBlockNumber {
  // The block number of the imported bridge exit.
  uint64 block_number = 1;

  // The imported bridge exit.
  agglayer.interop.types.v1.ImportedBridgeExit imported_bridge_exit = 2;
}

// Inserted GER with block number.
message ProvenInsertedGERWithBlockNumber {
  // The block number of the ger.
  uint64 block_number = 1;

  // The insert GER.
  ProvenInsertedGER proven_inserted_ger = 2;
}

// Proven inserted GER.
message ProvenInsertedGER {
  // Proof from GER to L1Root
  agglayer.interop.types.v1.MerkleProof proof_ger_l1root = 1;

  // L1InfoTree leaf
  agglayer.interop.types.v1.L1InfoTreeLeafWithContext l1_leaf = 2;
}
